// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/heronvitor/pkg/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ExchangeRateRepository is an autogenerated mock type for the ExchangeRateRepository type
type ExchangeRateRepository struct {
	mock.Mock
}

// GetCurrencyRateUntil provides a mock function with given fields: country, currency, until
func (_m *ExchangeRateRepository) GetCurrencyRateUntil(country string, currency string, until time.Time) (*entities.ExchangeRate, error) {
	ret := _m.Called(country, currency, until)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyRateUntil")
	}

	var r0 *entities.ExchangeRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) (*entities.ExchangeRate, error)); ok {
		return rf(country, currency, until)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Time) *entities.ExchangeRate); ok {
		r0 = rf(country, currency, until)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ExchangeRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Time) error); ok {
		r1 = rf(country, currency, until)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastUpdateAttempt provides a mock function with given fields:
func (_m *ExchangeRateRepository) GetLastUpdateAttempt() (*entities.ExchangeRateUpdateInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastUpdateAttempt")
	}

	var r0 *entities.ExchangeRateUpdateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*entities.ExchangeRateUpdateInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *entities.ExchangeRateUpdateInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ExchangeRateUpdateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveExchangeRates provides a mock function with given fields: _a0, _a1
func (_m *ExchangeRateRepository) SaveExchangeRates(_a0 []entities.ExchangeRate, _a1 entities.ExchangeRateUpdateInfo) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveExchangeRates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entities.ExchangeRate, entities.ExchangeRateUpdateInfo) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExchangeRateRepository creates a new instance of ExchangeRateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeRateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeRateRepository {
	mock := &ExchangeRateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
